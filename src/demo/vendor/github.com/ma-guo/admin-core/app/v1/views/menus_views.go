package views

// Generated by niuhe.idl

import (
	"fmt"
	"strings"

	"github.com/ma-guo/admin-core/app/v1/protos"
	"github.com/ma-guo/admin-core/utils"
	"github.com/ma-guo/admin-core/xorm/models"
	"github.com/ma-guo/admin-core/xorm/services"

	"github.com/ma-guo/niuhe"
)

type Menus struct {
	_Gen_Menus
}

// 菜单列表
func (v *Menus) List_GET(c *niuhe.Context, req *protos.V1MenusListReq, rsp *protos.V1MenusListRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	req.Keywords = strings.Trim(req.Keywords, " ")
	rows, err := svc.Menu().GetAll(req.Keywords)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	var findChildMenuItem func(parent *protos.MenuItem, rows []*models.SysMenu)
	// 查找子菜单
	idsMap := make(map[int64]int64, 0)
	findChildMenuItem = func(parent *protos.MenuItem, rows []*models.SysMenu) {
		for _, row := range rows {
			if row.ParentId != 0 && row.ParentId == parent.Id {
				if _, has := idsMap[row.Id]; has {
					continue
				}
				item := row.ToProtos()
				idsMap[row.Id] = row.Id
				findChildMenuItem(item, rows)
				parent.Children = append(parent.Children, item)
			}
		}
	}
	isInSearch := len(req.Keywords) > 0
	for _, row := range rows {
		if row.ParentId != 0 && !isInSearch {
			continue
		}
		if _, has := idsMap[row.Id]; has {
			continue
		}
		item := row.ToProtos()
		idsMap[row.Id] = row.Id
		findChildMenuItem(item, rows)

		rsp.Items = append(rsp.Items, item)
	}

	if len(rsp.Items) == 0 {
		rsp.Items = make([]*protos.MenuItem, 0)
	}
	return nil
}

// 删除菜单
func (v *Menus) Delete_POST(c *niuhe.Context, req *protos.V1MenusDeleteReq, rsp *protos.NoneRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	ids := utils.SplitInt64(req.Ids)
	for _, id := range ids {
		menu, err := svc.Menu().GetById(id)
		if err != nil {
			niuhe.LogInfo("%v", err)
			return err
		}
		err = svc.Menu().Delete(menu.Id)
		if err != nil {
			niuhe.LogInfo("%v", err)
			return err
		}
	}
	return nil
}

// 新增菜单
func (v *Menus) Add_POST(c *niuhe.Context, req *protos.V1MenusAddReq, rsp *protos.NoneRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	menu := &models.SysMenu{
		ParentId:   req.ParentId,
		TreePath:   "0",
		Name:       req.Name,
		Type:       0,
		Path:       req.Path,
		Component:  req.Component,
		Perm:       strings.Trim(req.Perm, " "),
		Visible:    req.Visible,
		Sort:       req.Sort,
		Icon:       req.Icon,
		Redirect:   req.Redirect,
		KeepAlive:  req.KeepAlive,
		AlwaysShow: req.AlwaysShow,
	}
	menu.SetType(req.Type)
	if req.ParentId > 0 {
		parent, err := svc.Menu().GetById(req.ParentId)
		if err != nil {
			niuhe.LogInfo("%v", err)
			return err
		}
		menu.TreePath = fmt.Sprintf("%s,%d", parent.TreePath, parent.Id)
	}
	_, err := svc.Menu().Insert(menu)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	return nil
}

// 菜单下拉列表
func (v *Menus) Options_GET(c *niuhe.Context, req *protos.NoneReq, rsp *protos.V1MenusOptionsRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	rows, err := svc.Menu().GetAll("")
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	var findChildMenuOption func(parent *protos.MenuOptions, rows []*models.SysMenu)
	// 查找子菜单-选项
	findChildMenuOption = func(parent *protos.MenuOptions, rows []*models.SysMenu) {
		for _, row := range rows {
			if row.ParentId != 0 && row.ParentId == parent.Value {
				item := &protos.MenuOptions{
					Children: make([]*protos.MenuOptions, 0),
					Value:    row.Id,
					Label:    row.Name,
				}
				findChildMenuOption(item, rows)
				parent.Children = append(parent.Children, item)
			}
		}
	}
	for _, row := range rows {
		if row.ParentId != 0 {
			continue
		}
		item := &protos.MenuOptions{
			Children: make([]*protos.MenuOptions, 0),
			Value:    row.Id,
			Label:    row.Name,
		}
		findChildMenuOption(item, rows)

		rsp.Items = append(rsp.Items, item)
	}

	if len(rsp.Items) == 0 {
		rsp.Items = make([]*protos.MenuOptions, 0)
	}
	return nil
}

// 路由列表
func (v *Menus) Routes_GET(c *niuhe.Context, req *protos.NoneReq, rsp *protos.MenuRouteRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	rows, err := svc.Menu().GetAll("")
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	roleCode := make(map[int64]string, 0)
	roles, err := svc.Role().GetAll()
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	for _, role := range roles {
		if role.Enable() {
			roleCode[role.Id] = role.Code
		}
	}
	roleMenus, err := svc.RoleMenu().GetAll()
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	// 查找 menuId 对应的权限字符串
	findRouteRoles := func(mid int64) []string {
		roles := make([]string, 0)
		for _, roleMenu := range roleMenus {
			if roleMenu.MenuId == mid {
				if code, has := roleCode[roleMenu.RoleId]; has {
					has = false
					for _, role := range roles {
						if role == code {
							has = true
							break
						}
					}
					if !has {
						roles = append(roles, code)
					}
				}
			}
		}
		return roles
	}

	menuToRouteItem := func(row *models.SysMenu) *protos.MenuRouteItem {
		item := &protos.MenuRouteItem{
			Path:      row.Path,
			Component: row.Component,
			Redirect:  row.Redirect,
			Name:      row.Name,
			Meta: &protos.MenuRouteMeta{
				Title:     row.Name,
				Icon:      row.Icon,
				Hiddle:    row.Visible == 0,
				Roles:     findRouteRoles(row.Id),
				KeepAlive: row.KeepAlive == 1,
			},
			Children: make([]*protos.MenuRouteItem, 0),
		}
		return item
	}

	var findChildRouteItem func(parent *models.SysMenu, result *protos.MenuRouteItem, rows []*models.SysMenu)
	findChildRouteItem = func(parent *models.SysMenu, result *protos.MenuRouteItem, rows []*models.SysMenu) {
		for _, row := range rows {
			if row.ParentId == parent.Id && parent.Id > 0 && row.IsRoute() {
				child := menuToRouteItem(row)
				findChildRouteItem(row, child, rows)
				result.Children = append(result.Children, child)
			}
		}
	}

	for _, row := range rows {
		if row.ParentId != 0 {
			continue
		}
		item := menuToRouteItem(row)

		findChildRouteItem(row, item, rows)
		rsp.Items = append(rsp.Items, item)
	}

	if len(rsp.Items) == 0 {
		rsp.Items = make([]*protos.MenuRouteItem, 0)
	}
	return nil
}

// 菜单表单
func (v *Menus) Form_GET(c *niuhe.Context, req *protos.V1MenusFormReq, rsp *protos.V1MenusFormRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	row, err := svc.Menu().GetById(req.Id)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	rsp.Id = row.Id
	rsp.AlwaysShow = row.AlwaysShow
	rsp.Component = row.Component
	rsp.Icon = row.Icon
	rsp.KeepAlive = row.KeepAlive
	rsp.Name = row.Name
	rsp.ParentId = row.ParentId
	rsp.Path = row.Path
	rsp.Perm = row.Perm
	rsp.Redirect = row.Redirect
	rsp.Sort = row.Sort
	rsp.Type = row.GetTypeValue()
	rsp.Visible = row.Visible

	return nil
}

// 修改菜单
func (v *Menus) Update_POST(c *niuhe.Context, req *protos.V1MenusUpdateReq, rsp *protos.NoneRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	menu, err := svc.Menu().GetById(req.Id)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	menu.AlwaysShow = req.AlwaysShow
	menu.Component = req.Component
	menu.Icon = req.Icon
	menu.KeepAlive = req.KeepAlive
	menu.Name = req.Name
	menu.ParentId = req.ParentId
	menu.Path = req.Path
	menu.Perm = strings.Trim(req.Perm, " ")
	menu.Redirect = req.Redirect
	menu.Sort = req.Sort
	menu.SetType(req.Type)
	menu.Visible = req.Visible
	err = svc.Menu().Update(menu.Id, menu)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	return nil
}

// 修改菜单状态
func (v *Menus) Status_POST(c *niuhe.Context, req *protos.V1MenusStatusReq, rsp *protos.NoneRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	menu, err := svc.Menu().GetById(req.Id)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	if menu.Visible == req.Visible {
		return nil
	}
	menu.Visible = req.Visible
	err = svc.Menu().Update(menu.Id, menu)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	return nil
}

// 菜单分页列表
func (v *Menus) Page_GET(c *niuhe.Context, req *protos.V1MenusPageReq, rsp *protos.V1MenusPageRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	rows, total, err := svc.Menu().GetPage(req.Keywords, req.Type, req.PageNum, req.PageSize)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	rsp.Total = total
	rsp.Items = make([]*protos.V1MenuTiny, 0)
	for _, row := range rows {
		item := &protos.V1MenuTiny{
			Id:   row.Id,
			Name: row.Name,
			Perm: row.Perm,
		}
		rsp.Items = append(rsp.Items, item)
	}

	return nil
}

func init() {
	GetModule().Register(&Menus{})
}
