package views

// Generated by niuhe.idl

import (
	"github.com/ma-guo/admin-core/app/v1/protos"
	"github.com/ma-guo/admin-core/utils"
	"github.com/ma-guo/admin-core/xorm/models"
	"github.com/ma-guo/admin-core/xorm/services"

	"github.com/ma-guo/niuhe"
)

type DictTypes struct {
	_Gen_DictTypes
}

// 字典类型分页列表
func (v *DictTypes) Page_GET(c *niuhe.Context, req *protos.V1DictTypesPageReq, rsp *protos.V1DictTypesPageRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	rows, total, err := svc.DictType().GetPage(req.Keywords, req.PageNum, req.PageSize)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	rsp.Total = total
	for _, row := range rows {
		rsp.List = append(rsp.List, &protos.V1DictTypesItem{
			Id:     row.Id,
			Code:   row.Code,
			Name:   row.Name,
			Remark: row.Remark,
			Status: row.Status,
		})

	}
	if len(rsp.List) == 0 {
		rsp.List = make([]*protos.V1DictTypesItem, 0)
	}
	return nil
}

// 字典类型表单
func (v *DictTypes) Form_GET(c *niuhe.Context, req *protos.V1DictTypesFormReq, rsp *protos.V1DictTypesFormRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	row, err := svc.DictType().GetById(req.Id)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	rsp.Id = row.Id
	rsp.Code = row.Code
	rsp.Name = row.Name
	rsp.Status = row.Status
	rsp.Remark = row.Remark

	return nil
}

// 字典类型新增
func (v *DictTypes) Add_POST(c *niuhe.Context, req *protos.V1DictTypesAddReq, rsp *protos.NoneRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	_, has, err := svc.DictType().GetByCode(req.Code)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	if has {
		return niuhe.NewCommError(-1, "字典类型编码已存在")
	}
	_, err = svc.DictType().Add(&models.SysDictType{
		// Id: req.Id,
		Code:   req.Code,
		Name:   req.Name,
		Status: req.Status,
		Remark: req.Remark,
	})
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	return nil
}

// 字典类型修改
func (v *DictTypes) Update_POST(c *niuhe.Context, req *protos.V1DictTypesUpdateReq, rsp *protos.NoneRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	row, err := svc.DictType().GetById(req.Id)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	if req.Code != row.Code {
		_, has, err := svc.DictType().GetByCode(req.Code)
		if err != nil {
			niuhe.LogInfo("%v", err)
			return err
		}
		if has {
			return niuhe.NewCommError(-1, "字典类型编码已存在")
		}
	}

	row.Code = req.Code
	row.Name = req.Name
	row.Status = req.Status
	row.Remark = req.Remark
	err = svc.DictType().Update(row.Id, row)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	return nil
}

// 字典类型删除
func (v *DictTypes) Delete_POST(c *niuhe.Context, req *protos.V1DictTypesDeleteReq, rsp *protos.NoneRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	ids := utils.SplitInt64(req.Ids)
	for _, id := range ids {
		err := svc.DictType().Delete(id)
		if err != nil {
			niuhe.LogInfo("%v", err)
			return err
		}
	}
	return nil
}
func init() {
	GetModule().Register(&DictTypes{})
}
