package views

// Generated by niuhe.idl

import (
	"os"
	"strings"
	"time"

	"github.com/ma-guo/admin-core/app/common/consts"
	"github.com/ma-guo/admin-core/app/v1/protos"
	"github.com/ma-guo/admin-core/utils"
	"github.com/ma-guo/admin-core/utils/bearer"
	"github.com/ma-guo/admin-core/utils/fileupload"
	"github.com/ma-guo/admin-core/xorm/models"
	"github.com/ma-guo/admin-core/xorm/services"

	"github.com/ma-guo/niuhe"
)

type Files struct {
	_Gen_Files
}

// 文件上传请求
func (v *Files) Upload_POST(c *niuhe.Context, req *protos.NoneReq, rsp *protos.V1FilesUploadRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	vendorName := consts.FileVendorEnum.Local.Value
	vendor, has, err := svc.Vendor().GetByKey(consts.FileVendorKey, consts.FileVendorKey)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	if has {
		vendorName = vendor.Value
	}
	if _, has := consts.FileVendorEnum.GetChoices()[vendorName]; !has {
		return niuhe.NewCommError(-1, "错误的文件存储提供商")
	}
	file, header, err := c.Request.FormFile("file")
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	tmpFileName := strings.Join([]string{time.Now().Format("060102150405"), header.Filename}, "-")
	tmpFile, err := utils.GetTmpFileName(tmpFileName)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	err = utils.SaveFile(file, tmpFile)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	rsp.Name = header.Filename
	// 移除临时文件
	defer os.Remove(tmpFile)
	auth, err := getAuthInfo(c)
	if err != nil {
		niuhe.LogInfo("%v", err)
		// return err
		auth = &bearer.Bearer{
			Uid: 1,
		}
	}

	actionSaveToDb := func(ossUrl, key string) error {

		_, err := svc.File().Add(&models.SysFile{
			Vendor: vendorName,
			Path:   ossUrl,
			Key:    key,
			Name:   rsp.Name,
			UserId: auth.Uid,
		})
		if err != nil {
			niuhe.LogInfo("%v", err)
			return err
		}
		return nil
	}

	dicts, err := svc.Vendor().GetByVendorToMap(vendorName)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}

	var providor fileupload.Provider

	switch vendorName {
	case consts.FileVendorEnum.Local.Value:
		providor = fileupload.NewLocal(dicts)
	case consts.FileVendorEnum.Qiniu.Value:
		providor = fileupload.NewQiniu(dicts)
	case consts.FileVendorEnum.Aliyun.Value:
		providor = fileupload.NewAliyun(dicts)
	case consts.FileVendorEnum.Tencent.Value:
		providor = fileupload.NewTencent(dicts)
	}
	if providor != nil {
		ossUrl, key, err := providor.Upload(tmpFile, tmpFileName)
		if err != nil {
			niuhe.LogInfo("%v", err)
			return err
		}
		rsp.Url = ossUrl
		err = actionSaveToDb(ossUrl, key)
		if err != nil {
			niuhe.LogInfo("%v", err)
			return err
		}
		return nil

	}
	return nil
}

// 文件删除请求
func (v *Files) Delete_POST(c *niuhe.Context, req *protos.V1FilesDeleteReq, rsp *protos.NoneRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	_, err := getAuthInfo(c)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	row, has, err := svc.File().GetByPath(req.FilePath)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	if !has {
		return nil
	}

	dicts, err := svc.Vendor().GetByVendorToMap(row.Vendor)
	if err != nil {
		return err
	}

	var providor fileupload.Provider
	switch row.Vendor {
	case consts.FileVendorEnum.Local.Value:
		providor = fileupload.NewLocal(dicts)
	case consts.FileVendorEnum.Qiniu.Value:
		providor = fileupload.NewQiniu(dicts)
	case consts.FileVendorEnum.Aliyun.Value:
		providor = fileupload.NewAliyun(dicts)
	case consts.FileVendorEnum.Tencent.Value:
		providor = fileupload.NewTencent(dicts)

	}
	if providor != nil {
		err = providor.Delete(row.Key)
		if err != nil {
			niuhe.LogInfo("%v", err)
			return err
		}
	}
	if err != nil {
		niuhe.LogInfo("vendor:%v, %v", row.Vendor, err)
		return err
	}
	err = svc.File().Delete(row.Id)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	return nil
}

// 文件下载请求
func (v *Files) Fetch_GET(c *niuhe.Context, req *protos.V1FileFetchReq, rsp *protos.NoneRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	dicts, err := svc.Vendor().GetByVendorToMap(consts.FileVendorEnum.Local.Value)
	if err != nil {
		return err
	}
	fileDir := ""
	if dir, has := dicts[consts.FileOssurl]; has {
		fileDir = dir
	}
	if fileDir == "" {

		tmpDir, err := utils.GetRunDir()
		if err != nil {
			return err
		}
		fileDir = tmpDir
	}
	fullName := strings.Join([]string{fileDir, req.Url}, "/")
	c.File(fullName)
	return niuhe.NewCommError(consts.CodeNoCommRsp, "文件下载成功")
}

// 文件分页请求
func (v *Files) Page_GET(c *niuhe.Context, req *protos.V1FilePageReq, rsp *protos.V1FilePageRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	rows, total, err := svc.File().GetPage(req.Name, req.Vendor, req.PageNum, req.PageSize)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	rsp.Total = total
	choices := consts.FileVendorEnum.GetChoices()
	for _, row := range rows {
		file := &protos.V1FileItem{
			Id:         row.Id,
			Name:       row.Name,
			Url:        row.Path,
			Vendor:     row.Vendor,
			Key:        row.Key,
			CreateTime: row.CreateTime.Format(consts.FullTimeLayout),
		}
		if name, has := choices[row.Vendor]; has {
			file.VendorName = name
		}
		rsp.Items = append(rsp.Items, file)
	}
	if len(rsp.Items) == 0 {
		rsp.Items = make([]*protos.V1FileItem, 0)
	}

	return nil
}

// 文件修改弹窗请求
func (v *Files) Form_GET(c *niuhe.Context, req *protos.V1FileFormReq, rsp *protos.V1FileFromRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	row, err := svc.File().GetById(req.Id)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	rsp.Id = row.Id
	rsp.Name = row.Name
	rsp.Url = row.Path
	rsp.Vendor = row.Vendor
	rsp.Key = row.Key
	rsp.CreateTime = row.CreateTime.Format(consts.FullTimeLayout)
	return nil
}

// 文件修改请求
func (v *Files) Update_POST(c *niuhe.Context, req *protos.V1FileUpdateReq, rsp *protos.NoneRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	row, err := svc.File().GetById(req.Id)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	if row.Name == req.Name {
		return nil
	}
	row.Name = req.Name
	err = svc.File().Update(row.Id, row)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	return nil
}

func init() {
	GetModule().Register(&Files{})
}
