package views

// Generated by niuhe.idl

import (
	"github.com/ma-guo/admin-core/app/common/consts"
	"github.com/ma-guo/admin-core/app/v1/protos"
	"github.com/ma-guo/admin-core/config"
	"github.com/ma-guo/admin-core/utils"
	"github.com/ma-guo/admin-core/xorm/models"
	"github.com/ma-guo/admin-core/xorm/services"

	"github.com/ma-guo/niuhe"
)

type Vendor struct {
	_Gen_Vendor
	hasInit   bool // 本次启动是否已经执行过初始化代码
	keyVendor string
}

// 获取文件存储区域
func (v *Vendor) Zones_GET(c *niuhe.Context, req *protos.NoneReq, rsp *protos.V1FilesZoneRsp) error {
	converZone := func(choices map[string]string) []*protos.StringOptionItem {
		items := make([]*protos.StringOptionItem, 0)
		for value, name := range choices {
			items = append(items, &protos.StringOptionItem{
				Value: value,
				Label: name,
			})
		}
		return items
	}
	rsp.Qiniu = converZone(consts.QiniuZoneEnum.GetChoices())

	return nil
}

// 初始化文件提供商参数
func (v *Vendor) Init_GET(c *niuhe.Context, req *protos.NoneReq, rsp *protos.NoneRsp) error {
	if v.hasInit {
		return nil
	}
	svc := services.NewSvc()
	defer svc.Close()

	type VendorRow struct {
		Vendor niuhe.StringConstItem
		Name   string
		Remark string
		Value  string
		Key    string
	}
	rows := make([]VendorRow, 0)
	actionAppend := func(vendor niuhe.StringConstItem, key, name, remark, value string) {
		rows = append(rows, VendorRow{
			Vendor: vendor,
			Name:   name,
			Value:  value,
			Key:    key,
			Remark: remark,
		})
	}
	prefix := config.Config.Fileprefix
	if prefix == "" {
		prefix = "admin"
	}
	// 当前服务商
	fileVendor := niuhe.StringConstItem{
		Value: v.keyVendor,
		Name:  "当前服务商",
	}
	runDir, err := utils.GetRunDir()
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	actionAppend(fileVendor, v.keyVendor, fileVendor.Name, "文件存储提供商", consts.FileVendorEnum.Local.Value)
	actionAppend(consts.FileVendorEnum.Local, consts.FileOssurl, "存储路径", "文件存储位置", runDir)
	actionAppend(consts.FileVendorEnum.Local, consts.FilePrefix, "文件前缀", "本地存储前缀", prefix)
	// 七牛云
	actionAppend(consts.FileVendorEnum.Qiniu, consts.FileAccesKey, "AccessKey", "七牛AccessKey", "")
	actionAppend(consts.FileVendorEnum.Qiniu, consts.FileSecretKey, "SecretKey", "七牛SecretKey", "")
	actionAppend(consts.FileVendorEnum.Qiniu, consts.FileBucket, "Bucket", "七牛存储空间名称", "")
	actionAppend(consts.FileVendorEnum.Qiniu, consts.FileZone, "Zone", "七牛存储区域", consts.QiniuZoneEnum.Huadong.Value)
	actionAppend(consts.FileVendorEnum.Qiniu, consts.FileOssurl, "QiniuHost", "七牛访问域名", "")
	actionAppend(consts.FileVendorEnum.Qiniu, consts.FilePrefix, "文件前缀", "七牛存储前缀", prefix)
	// 阿里云 endpoint, accessKeyID, accessKeySecret
	actionAppend(consts.FileVendorEnum.Aliyun, consts.FileAccesKey, "AccessKeyID", "阿里云访问密钥ID", "")
	actionAppend(consts.FileVendorEnum.Aliyun, consts.FileSecretKey, "AccessKeySecret", "阿里云访问密钥", "")
	actionAppend(consts.FileVendorEnum.Aliyun, consts.FileBucket, "BucketName", "阿里云存储空间名称", "")
	actionAppend(consts.FileVendorEnum.Aliyun, consts.FileEndpoint, "Endpoint", "阿里云OSS端点", "")
	// actionAppend(consts.FileVendorEnum.Aliyun, consts.FileOssurl, "AliyunOssHost", "阿里云访问域名", "")
	actionAppend(consts.FileVendorEnum.Aliyun, consts.FilePrefix, "文件前缀", "阿里云存储前缀", prefix)

	// 腾讯云
	actionAppend(consts.FileVendorEnum.Tencent, consts.FileAccesKey, "SecretID", "腾讯云SecretId", "")
	actionAppend(consts.FileVendorEnum.Tencent, consts.FileSecretKey, "SecretKey", "腾讯云SecretKey", "")
	actionAppend(consts.FileVendorEnum.Tencent, consts.FileOssurl, "CosHost", "COS域名, https...myqcloud.com", "")
	actionAppend(consts.FileVendorEnum.Tencent, consts.FilePrefix, "文件前缀", "阿里云存储前缀", prefix)
	for _, row := range rows {
		vendor := &models.SysVendor{
			Vendor: row.Vendor.Value,
			Name:   row.Name,
			Value:  row.Value,
			Remark: row.Remark,
			Key:    row.Key,
		}
		// 存在则跳过
		if _, has, err := svc.Vendor().Has(vendor); err != nil {
			niuhe.LogInfo("%v", err)
			return err

		} else if has {
			continue
		}
		err := svc.Vendor().Insert(vendor)
		if err != nil {
			return err
		}
	}

	v.hasInit = true
	return nil
}

// 获取文件存储提供商列表
func (v *Vendor) List_GET(c *niuhe.Context, req *protos.NoneReq, rsp *protos.V1FilesVendorsRsp) error {
	// choices := consts.FileVendorEnum.GetChoices()
	rsp.Items = make([]*protos.StringOptions, 0)
	parent := &protos.StringOptions{
		Value:    "OSS存储",
		Label:    "OSS存储",
		Children: []*protos.StringOptions{},
	}

	appendItem := func(vendor niuhe.StringConstItem) {
		parent.Children = append(parent.Children, &protos.StringOptions{
			Value:    vendor.Value,
			Label:    vendor.Name,
			Children: []*protos.StringOptions{},
		})
	}
	// 可手动调整顺序
	appendItem(consts.FileVendorEnum.Local)
	appendItem(consts.FileVendorEnum.Qiniu)
	appendItem(consts.FileVendorEnum.Aliyun)
	appendItem(consts.FileVendorEnum.Tencent)
	rsp.Current = &protos.V1VendorItem{}
	svc := services.NewSvc()
	defer svc.Close()
	row, _, err := svc.Vendor().GetByKey(v.keyVendor, v.keyVendor)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}

	if row != nil {
		rsp.Current = row.ToProps()
	}
	rsp.Items = append(rsp.Items, parent)
	return nil

}

// 文件配置列表
func (v *Vendor) Page_GET(c *niuhe.Context, req *protos.V1VendorPageReq, rsp *protos.V1VendorPageRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	if req.PageSize < 10 {
		req.PageSize = 10
	}
	rows, total, err := svc.Vendor().GetPage(req.Vendor, req.PageNum, req.PageSize)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	rsp.Total = total
	for _, row := range rows {
		rsp.Items = append(rsp.Items, row.ToProps())
	}
	if len(rsp.Items) == 0 {
		rsp.Items = make([]*protos.V1VendorItem, 0)
	}
	return nil

}

// 获取配置项详情值
func (v *Vendor) Form_GET(c *niuhe.Context, req *protos.V1VendorFormReq, rsp *protos.V1VendorFormRsp) error {
	svc := services.NewSvc()
	defer svc.Close()

	row, err := svc.Vendor().GetById(req.Id)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	rsp.Item = row.ToProps()
	rsp.Options = make([]*protos.StringOptionItem, 0)

	if row.Key == consts.FileZone {
		// 转换机房区域为选项列表
		converZone := func(choices map[string]string) []*protos.StringOptionItem {
			items := make([]*protos.StringOptionItem, 0)
			for value, name := range choices {
				items = append(items, &protos.StringOptionItem{
					Value: value,
					Label: name,
				})
			}
			return items
		}

		if row.Vendor == consts.FileVendorEnum.Qiniu.Value {
			rsp.Options = converZone(consts.QiniuZoneEnum.GetChoices())
		}
	}

	return nil
}

// 更新配置项
func (v *Vendor) Update_POST(c *niuhe.Context, req *protos.V1VendorUpdateReq, rsp *protos.NoneRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	row, err := svc.Vendor().GetById(req.Id)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	row.Key = req.Key
	row.Name = req.Name
	row.Value = req.Value
	row.Remark = req.Remark
	row.Value = req.Value
	err = svc.Vendor().Update(row.Id, row)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	return nil
}

func init() {
	GetModule().Register(&Vendor{
		hasInit:   false,
		keyVendor: consts.FileVendorKey,
	})
}
