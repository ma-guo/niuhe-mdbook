package views

// Generated by niuhe.idl
import (
	"net/http"
	"time"

	"github.com/ma-guo/admin-core/app/common/consts"
	"github.com/ma-guo/admin-core/app/v1/protos"
	"github.com/ma-guo/admin-core/utils/bearer"

	"github.com/ma-guo/niuhe"
	cache "github.com/patrickmn/go-cache"
)

// 格式化错误应答
// @param code 错误码
// @param msg 错误信息
func rspWithError(c *niuhe.Context, code int, msg string) {
	c.JSON(http.StatusOK, map[string]interface{}{
		"result":  code,
		"message": msg,
	})
}

// 格式化错误应答
// @param code 错误码
// @param msg 错误信息
func rspWithSuccess(c *niuhe.Context, data interface{}) {
	c.JSON(http.StatusOK, map[string]interface{}{
		"result": 0,
		"data":   data,
	})
}

// 从头信息中获取登录信息
func getAuthInfo(c *niuhe.Context) (*bearer.Bearer, error) {
	auth, has := c.Get(consts.Authorization)
	if !has {
		return nil, niuhe.NewCommError(consts.AuthError, "no auth info")
	}
	jwt := auth.(*bearer.Bearer)
	return jwt, nil
}

var thisModule *niuhe.Module

// 自定义的协议处理
var protocol *V1ApiProtocol

func GetProtocol() *V1ApiProtocol {
	if protocol == nil {
		protocol = &V1ApiProtocol{
			store: cache.New(1*time.Minute, 5*time.Second),
			skipUrl: map[string]bool{
				"/api/v1/auth/login/":   true,
				"/api/v1/auth/captcha/": true,
				"/api/v1/files/fetch/":  true,
			},
			proxy:     nil,
			routes:    []*protos.RouteItem{},
			routeInit: false,
		}
		protocol.AddRoute("/api", protos.RouteItems)
	}

	return protocol
}

// 如果需要使用自己的协议，可以在这里设置
func SetProtocol(proxy niuhe.IApiProtocol) {
	GetProtocol().proxy = proxy
}

// 添加跳过路由
func AddSkipUrl(url string) {
	GetProtocol().skipUrl[url] = true
}

func GetModule() *niuhe.Module {
	if thisModule == nil {
		// 在路由前统一添加 api 前缀
		thisModule = niuhe.NewModuleWithProtocolFactoryFunc("api/v1", func() niuhe.IApiProtocol {
			protocol := GetProtocol()
			err := protocol.InitRoute()
			if err != nil {
				niuhe.LogInfo("init protocol error: %v", err)
			}
			return protocol
		})
		// thisModule = niuhe.NewModule("api")
	}
	return thisModule
}
