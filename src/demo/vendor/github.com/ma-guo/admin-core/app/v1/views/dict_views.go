package views

// Generated by niuhe.idl

import (
	"github.com/ma-guo/admin-core/app/v1/protos"
	"github.com/ma-guo/admin-core/utils"
	"github.com/ma-guo/admin-core/xorm/models"
	"github.com/ma-guo/admin-core/xorm/services"

	"github.com/ma-guo/niuhe"
)

type Dict struct {
	_Gen_Dict
}

// 字典分页列表
func (v *Dict) Page_GET(c *niuhe.Context, req *protos.V1DictPageReq, rsp *protos.V1DictPageRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	rows, total, err := svc.Dict().GetPage(req.Keywords, req.TypeCode, req.PageNum, req.PageSize)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	rsp.Total = total
	for _, row := range rows {
		item := &protos.V1DictItem{
			Id:     row.Id,
			Name:   row.Name,
			Value:  row.Value,
			Status: row.Status,
			Remark: row.Remark,
		}
		rsp.List = append(rsp.List, item)
	}
	if len(rsp.List) == 0 {
		rsp.List = make([]*protos.V1DictItem, 0)
	}
	return nil
}

// 字典下拉列表
func (v *Dict) Options_GET(c *niuhe.Context, req *protos.V1DictOptionsReq, rsp *protos.V1DictOptionsRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	rows, err := svc.Dict().GetByCode(req.TypeCode)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}

	for _, row := range rows {

		item := &protos.StringOptions{
			Children: make([]*protos.StringOptions, 0),
			Value:    row.Value,
			Label:    row.Name,
		}
		// findChildDictOption(item, rows)

		rsp.Items = append(rsp.Items, item)
	}

	if len(rsp.Items) == 0 {
		rsp.Items = make([]*protos.StringOptions, 0)
	}
	return nil
}

// 字典数据表单数据
func (v *Dict) Form_GET(c *niuhe.Context, req *protos.V1DictFormReq, rsp *protos.V1DictFormRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	row, err := svc.Dict().GetById(req.Id)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	rsp.Id = row.Id
	rsp.Name = row.Name
	rsp.TypeCode = row.TypeCode
	rsp.Value = row.Value
	rsp.Sort = row.Sort
	rsp.Remark = row.Remark
	rsp.Status = row.Status

	return nil
}

// 新增字典
func (v *Dict) Add_POST(c *niuhe.Context, req *protos.V1DictAddReq, rsp *protos.NoneRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	_, has, err := svc.DictType().GetByCode(req.TypeCode)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	if !has {
		return niuhe.NewCommError(-1, "字典类型不存在")
	}
	row := &models.SysDict{
		Name:     req.Name,
		TypeCode: req.TypeCode,
		Value:    req.Value,
		Sort:     req.Sort,
		Remark:   req.Remark,
		Status:   req.Status,
	}
	_, err = svc.Dict().Add(row)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	return nil
}

// 修改字典
func (v *Dict) Update_POST(c *niuhe.Context, req *protos.V1DictUpdateReq, rsp *protos.NoneRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	row, err := svc.Dict().GetById(req.Id)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	row.Name = req.Name
	row.TypeCode = req.TypeCode
	row.Value = req.Value
	row.Sort = req.Sort
	row.Remark = req.Remark
	row.Status = req.Status
	err = svc.Dict().Update(row.Id, row)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}

	return nil
}

// 删除字典
func (v *Dict) Delete_POST(c *niuhe.Context, req *protos.V1DictDeleteReq, rsp *protos.NoneRsp) error {
	svc := services.NewSvc()
	defer svc.Close()
	ids := utils.SplitInt64(req.Ids)
	for _, id := range ids {
		err := svc.Dict().Delete(id)
		if err != nil {
			niuhe.LogInfo("%v", err)
			return err
		}
	}
	return nil
}
func init() {
	GetModule().Register(&Dict{})
}
