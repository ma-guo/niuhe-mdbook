package views

// Generated by niuhe.idl

import (
	"strings"

	"github.com/ma-guo/admin-core/app/common/consts"
	"github.com/ma-guo/admin-core/app/v1/protos"
	"github.com/ma-guo/admin-core/config"
	"github.com/ma-guo/admin-core/utils/bearer"
	"github.com/ma-guo/admin-core/utils/captcha"
	"github.com/ma-guo/admin-core/utils/password"
	"github.com/ma-guo/admin-core/xorm/services"

	"github.com/ma-guo/niuhe"
)

type Auth struct {
	_Gen_Auth
	salt string
}

// 登录
func (v *Auth) Login_POST(c *niuhe.Context, req *protos.AuthLoginReq, rsp *protos.AauthLoginRsp) error {
	// 登录初始 vendror
	vendor := &Vendor{
		hasInit:   false,
		keyVendor: consts.FileVendorKey,
	}
	vendor.Init_GET(c, &protos.NoneReq{}, &protos.NoneRsp{})
	rsp.TokenType = consts.Bearer
	captcha := captcha.NewCaptcha()
	if !captcha.Verify(req.CaptchaKey, req.CaptchaCode) {
		niuhe.LogInfo("captcha key: %v, %v", captcha.Key, captcha.Answer)
		return niuhe.NewCommError(-1, "验证码错误")
	}
	svc := services.NewSvc()
	defer svc.Close()
	req.Username = strings.Trim(req.Username, " ")
	user, has, err := svc.User().GetByUsername(req.Username)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	if !has {
		return niuhe.NewCommError(-1, "用户不存在或密码错误")
	}
	pwd := password.NewPassword(req.Password)
	pwd.SetSalt(v.salt)

	if !pwd.Compare(user.Password) {
		if user.Username == "admin" {
			// 用户名为 admin 的用户登录时，记录密码
			niuhe.LogInfo("admin pwd:%v", pwd.Hash())
		}
		return niuhe.NewCommError(-1, "用户不存在或密码错误")
	}

	if user.Deleted {
		return niuhe.NewCommError(-1, "账号已被禁用")
	}

	jwt := bearer.NewBearer(config.Config.Secretkey, user.Id, req.Username)
	err = jwt.GenToken()
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	rsp.AccessToken = jwt.Token
	rsp.RefreshToken = ""
	rsp.ExpiresIn = jwt.ExpiresAt * 1000 // 毫秒
	c.Context.Writer.Header().Set(consts.Authorization, strings.Join([]string{consts.Bearer, jwt.Token}, " "))
	return nil
}

// 登出
func (v *Auth) Logout_POST(c *niuhe.Context, req *protos.NoneReq, rsp *protos.NoneRsp) error {
	token := c.GetHeader(consts.Authorization)
	if len(token) < 10 {
		return niuhe.NewCommError(-1, "token error")
	}
	token = token[len(consts.Bearer)+1:]
	jtw := bearer.NewBearer(config.Config.Secretkey, 0, "")
	err := jtw.Parse(token)
	if err != nil {
		niuhe.LogInfo("%v", err)
		return err
	}
	niuhe.LogInfo("logout: %v", jtw.Username)
	return nil
}

// 获取验证码
func (v *Auth) Captcha_GET(c *niuhe.Context, req *protos.NoneReq, rsp *protos.AuthCaptchaRsp) error {
	captcha := captcha.NewCaptcha()
	err := captcha.Create()
	if err != nil {
		niuhe.LogInfo("%v", err)
	}
	rsp.CaptchaKey = captcha.Key
	rsp.CaptchaBase64 = captcha.Base64
	rsp.Width = captcha.Width
	rsp.Height = captcha.Height
	niuhe.LogInfo("captcha key: %v, %v", captcha.Key, captcha.Answer)
	return nil
}
func init() {
	GetModule().Register(&Auth{
		salt: "admincore",
	})
}
